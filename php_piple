class Pipe {
    const SUCCESS = 0;
    const ERROR   = 1;

    private $result;

    public static function make($param) {
        return new Pipe($param);
    }
    public function __construct($param)
    {
        $this->result = [self::SUCCESS, $param];
    }

    public function get() {
        return $this->result;
    }

    public function next() {
        $params = func_get_args();

        [$code, $result] = $this->result;
        if ($code == self::ERROR) {
            return $this;
        }

        $fun = $params[0];
        $next_params = array_slice($params, 1, count($params)-1);

        $text = false;


        foreach ($next_params as &$item) {
            preg_match('/^\$\$$/', $item, $match);

            if(!empty($match)) {
                $text = true;

                $item = $result;
            }
        }

        if (!$text) {
            $next_params = array_merge([$result], $next_params);
        }

        // callable
        if ($fun instanceof Closure) {
            $this->result = [self::SUCCESS, $fun(...$next_params)];
            return $this;
        }

        if (function_exists($fun)) {
            $this->result = [self::SUCCESS, call_user_func($fun, ...$next_params)];
        } else {
            $message = 'Without function: ' . $fun;
            $this->result = [self::ERROR, $message];
        }

        return $this;
    }
}


// $sub_domain = Take::make('https://blog.sebastiaanluca.com/')
//                     ->pip('parse_url', PHP_URL_HOST)
//                     ->pip('explode', '.', '&1')
//                     ->get();
//
// var_dump($sub_domain);

// $sub_domain = Take::make('http://blog.sebastiaanluca.com')
//     ->pip('parse_url', PHP_URL_HOST)
//     ->pip('explode', '.', '$$')
//     ->get();
//
// var_dump($sub_domain);


function add($a, $b) {
    return $a + $b;
}
function sub($a, $b) {
    return $a - $b;
}
function mul($a, $b) {
    return $a * $b;
}

// (1 + 1 - 3) * 5
// $sum = Take::make(1, 2)
//     ->pip('add', 5, '$$')
//     ->pip('sub', '$$', 3)
//     ->pip('mul', 5)
//     ->get();
//
// var_dump($sum);

$makeMiddleWare = function($fun) {

    return function($request) use ($fun) {

        if ($request == 'respond') {
            return 'Get respond';
        }

        return $fun($request);
    };

};

$m1 = $makeMiddleWare(function($request){ return $request;});
$mx = $makeMiddleWare(function($request){ return 'respond';});
$m2 = $makeMiddleWare(function($request){ return $request;});

// $middleWare1 = function($request) {
//
//     return $request;
// };
//
// $middleWareX = function($request) {
//
//     return 'respond';
// };
//
// $middleWare2= function($request) {
//
//     return $request;
// };


$r = Pipe::make('request')
         ->next($m1)
         ->next($mx)
         ->next($m2)
         ->get();

var_dump($r);
